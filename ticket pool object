import threading
import time
import random

class TicketPool:
    def __init__(self, total_tickets):
        self.total_tickets = total_tickets
        self.lock = threading.Lock()

    def buy_ticket(self, num_tickets):
        with self.lock:
            if self.total_tickets >= num_tickets:
                time.sleep(1)  # 模拟购票过程
                self.total_tickets -= num_tickets
                print(f"Successfully bought {num_tickets} tickets!")
            else:
                print(f"Failed to buy {num_tickets} tickets! Not enough tickets.")

def try_to_buy_tickets(pool, num_tickets):
    pool.buy_ticket(num_tickets)

def main():
    total_tickets = 10
    pool = TicketPool(total_tickets)

    num_threads = 20
    threads = []

    for _ in range(num_threads):
        num_tickets = random.randint(1, 3)
        thread = threading.Thread(target=try_to_buy_tickets, args=(pool, num_tickets))
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()

    print(f"All threads have finished. Tickets remaining: {pool.total_tickets}")

if __name__ == "__main__":
    main()
